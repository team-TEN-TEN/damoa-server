plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.tenten'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// DB
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// API Docs
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	// queryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
}

jacoco {
	toolVersion = "0.8.12"
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test // 테스트 이후에 수행

	reports {
		xml.required.set(true)
		html.required.set(true)

		// QueryDSL QDomain 제외시키기
		def QDomains = []

		for (qPattern in '**/QA'..'**/QZ') {
			QDomains.add(qPattern + '*')
		}
		afterEvaluate {
			classDirectories.setFrom(
					files(classDirectories.files.collect {
						fileTree(dir: it, excludes: [
								"com/tenten/damoa/**/domain/**",
								"**/*Application*",
								"**/*Config*",
								"**/*Req*",
								"**/*Res*",
								"**/*Interceptor*",
								"**/*Exception*",
								"**/*specification*"
						] + QDomains)
					})
			)
		}

		xml.destination file("${layout.buildDirectory.get().asFile}/jacoco/index.xml")   // `build` 디렉토리에 리포트 파일 생성
		html.destination file("${layout.buildDirectory.get().asFile}/jacoco/index.html")
	}
}
/** Jacoco end **/

tasks.named('test') {
	useJUnitPlatform()
}
